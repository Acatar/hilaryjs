describe("hilary",function(){var e,t;t={empty:{name:"foo",output:"registered foo!"},emptyToo:{name:"bar",output:"registered bar!"}},beforeEach(function(){e=hilary.createContainer()}),it("should exist in window",function(){expect(window.hilary).not.toBe(null)}),it("should create new parent containers",function(){expect(e).not.toBe(null)}),describe("hilary.register",function(){it("should register single modules by name",function(){e.register(t.empty.name,function(){return t.empty.output}),expect(e.resolve(t.empty.name)()).toBe(t.empty.output)})}),describe("hilary.resolve",function(){it("should resolve single modules by name",function(){e.register(t.empty.name,function(){return t.empty.output}),expect(e.resolve(t.empty.name)()).toBe(t.empty.output)}),it("should resolve multiple modules by name",function(){e.register(t.empty.name,function(){return t.empty.output}),e.register(t.emptyToo.name,function(){return t.emptyToo.output}),e.resolve([t.empty.name,t.emptyToo.name],function(e,n){expect(e()).toBe(t.empty.output),expect(n()).toBe(t.emptyToo.output)})}),it("should resolve container and parentContainer modules by name",function(){e.createChildContainer().resolve(["$container","$parentContainer"],function(e,t){expect(e).not.toBe(null),expect(e.getContainer).not.toBe(null),expect(t).not.toBe(null),expect(t.getContainer).not.toBe(null)})})})});